rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
   // Rules for the 'admins' collection
     match /admins/{admin} {
     	allow read: if true;
      allow write: if request.auth.uid != null;
     }
     ////////////////////////////////////////
  
  // Rules for the 'announcement' collection
     match /announcement/{announcement=**} {
     	allow read, write: if true;
     }
     ////////////////////////////////////////
     
       // Rules for the 'problemContacts' collection
     match /problemContacts/{problemContact=**} {
     	allow read, write: if request.auth.uid != null;
     }
     ////////////////////////////////////////
    
       // Rules for the 'registrationContacts' collection
     match /registrationContacts/{registrationContact=**} {
     	allow read, write: if request.auth.uid != null;
     }
     ////////////////////////////////////////
  
     // Rules for the 'universities' collection
     match /universities/{universitiy}/colleges/{college}/courses/{course} {
     allow read, write: if request.auth.uid != null;
     
       match /polls/{poll=**} {
       	allow read, write: if true;
      	 	//match /vottings/{voting} {
       			//allow read, write: if request.auth.uid != null;
     			//}
     		}
        
        match /assignment/{assignment=**} {
          // Allow the student to read data if the assignment has the 'endDate'
          // field set to less than or equal today's date.
          //allow read: if request.time <= resource.data.endDate;
          //allow write: if request.auth.uid != null;	
          //allow  write: if request.auth.uid != null;
           allow read: if request.auth.uid != null;
           allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.instructor == true;
        }
      
        match /categories/{category} {
          
           // Allow the user to write categories if their user document has the
          // 'instructor' field set to 'true'
          allow read: if request.auth.uid != null;
					allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.instructor == true;
          
          match /materials/{document=**} {
            // Allow the user to access documents in the "materials" collection
    			  // only if they are authenticated.
            allow read: if request.auth.uid != null;
            allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.instructor == true;
          }

        }
      
         match /posts/{post} {
          	// Allow the user to access documents in the "posts" collection
    			  // only if they are authenticated.
            allow read, write: if request.auth.uid != null;
            
            match /comments {
              allow read, write: if request.auth.uid != null;
            }
        	}
     
    } 
    
    // Rules for the 'users' collection
     match /users/{userId=**} {
     allow read, write: if true;
     //make sure users can only read and write their own data
    	//allow read, update, delete: if request.auth.uid == userId;
      //allow create: if request.auth.uid != null;
     }
     ////////////////////////////////////////
	}
}

        
//     // To make sure users can only read and write their own data:    
//     // Make sure the uid of the requesting user matches name of the user
//     // document. The wildcard expression {userId} makes the userId variable
//     // available in rules.
//      //match /users/{userId} {
//       //allow read, update, delete: if request.auth.uid == userId;
//       //allow create: if request.auth.uid != null;
//     //}
    
  
  //allow read: if request.auth != null;
     //	allow write : if request.auth.token.
       							//&& resource.data.roles.instructor
                     //&& resource.data.name == 'Ahmed Al-naggar';